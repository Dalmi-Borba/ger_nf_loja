<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciador de Notas Fiscais</title>
    <style>
        body {
            font-family: 'Open Sans', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background: #f4f4f4;
            color: #333;
        }
        .container {
            max-width: 600px;
            margin: auto;
            text-align: center;
        }
        input[type="file"] {
            margin: 10px 0;
        }
        textarea {
            width: 100%;
            height: 200px;
            margin-top: 10px;
            font-family: monospace;
        }
    </style>
</head>
<%- include('./partials/styles'); %>
<body>
    <header>
        <span>Gerenciador de Notas Fiscais</span>
        <%- include('./partials/nav'); %>
    </header>
    <div class="container">
        <p>Notas de Vendas</p>
        <div>
            <span>Arquivo CSV: </span>
            <input type="file" id="csvFileInput" accept=".csv"><br><br>
        </div>

        <% 
            let conteudo = '';
            conteudo += `nota;historico;` + '\n';
            notas.forEach(nota => {
                //Vda 548192 - 20/01/2025 - NF-e. 20220-1 E12341
                //Pedido;CPF/CNPJ;AUT;Data
                //conteudo += `Vda ${nota.aut_card} - ${nota.data_criacao_pedido} - NF-e. ${nota.numero_nota} E${nota.order_id}` + '\n';
                conteudo += `${nota.numero_nota};${nota.historico};` + '\n';
            });
        %>
        <textarea id="referenceTextarea"><%= conteudo %></textarea>

        <button id="processButton">Processar</button>

        <textarea id="output" readonly placeholder="Resultado aparecerá aqui..."></textarea>
        <button onclick="salvar()">Salvar CSV</button>
    </div>

    <script>
        document.getElementById('processButton').addEventListener('click', () => {
            const csvInput = document.getElementById('csvFileInput');
            const referenceTextarea = document.getElementById('referenceTextarea');
            const output = document.getElementById('output');

            if (!csvInput.files.length) {
                alert('Por favor, selecione o arquivo CSV.');
                return;
            }
            const refContent = referenceTextarea.value.trim();
            if (!refContent) {
                alert('Por favor, cole o conteúdo de referência no textarea.');
                return;
            }

            // Monta o mapa de notas → históricos
            const refLines = refContent.split('\n').map(line => line.split(';'));
            const notaMap = {};
            refLines.forEach(([nota, historico]) => {
                if (nota && historico) {
                    notaMap[nota.trim()] = historico.trim();
                }
            });

            const csvFile = csvInput.files[0];
            const readerCsv = new FileReader();
            readerCsv.onload = function (eventCsv) {
                const csvContent = eventCsv.target.result;
                const rows = csvContent.split('\n');

                // Processar as linhas a partir da linha 2
                for (let i = 1; i < rows.length; i++) {
                    const columns = rows[i].split(';');

                    if (columns[0]?.trim() === '1131001') {
                        const columnH = columns[7]?.trim();
                        if (!columnH) continue;

                        const notaMatch = columnH.match(/\b\d{5}-\d\b/);
                        if (notaMatch) {
                            const notaFiscal = notaMatch[0].split('-')[0];
                            const historico = notaMap[notaFiscal];
                            if (historico) {
                                columns[7] = historico;
                                if (historico.includes('PIX')) {
                                    columns[0] = '1112001';
                                    columns[1] = '130024395';
                                } else {
                                    columns[0] = '2139090';
                                    columns[1] = '32';
                                }
                            } else {
                                console.warn(`Linha ${i+1}: nota ${notaFiscal} não encontrada`);
                            }
                        }
                    }
                    rows[i] = columns.join(';');
                }

                // Substituição global "NF:" → "NF-e."
                const updatedCsv = rows.join('\n').replace(/NF:/g, 'NF-e.');
                output.value = updatedCsv;
            };
            readerCsv.readAsText(csvFile);
        });

        function salvar() {
            const texto = document.getElementById("output").value;
            if (!texto) {
                alert('Nada para salvar!');
                return;
            }
            const blob = new Blob([texto], { type: "text/plain;charset=utf-8" });
            saveAs(blob, "lote_assi.csv");
        }
    </script>

    <script>
    (function(a,b){if("function"==typeof define&&define.amd)define([],b);else if("undefined"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error("could not download file")},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,a=/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,"undefined"!=typeof module&&(module.exports=g)});
    </script>
</body>
</html>
